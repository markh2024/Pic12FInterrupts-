

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Sep 26 22:17:07 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x5E,2
    15     0000                     
    16                           ; Generated 17/08/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC12F675 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0000                     	;# 
    51     0001                     	;# 
    52     0002                     	;# 
    53     0003                     	;# 
    54     0004                     	;# 
    55     0005                     	;# 
    56     000A                     	;# 
    57     000B                     	;# 
    58     000C                     	;# 
    59     000E                     	;# 
    60     000E                     	;# 
    61     000F                     	;# 
    62     0010                     	;# 
    63     0019                     	;# 
    64     001E                     	;# 
    65     001F                     	;# 
    66     0081                     	;# 
    67     0085                     	;# 
    68     008C                     	;# 
    69     008E                     	;# 
    70     0090                     	;# 
    71     0095                     	;# 
    72     0096                     	;# 
    73     0096                     	;# 
    74     0099                     	;# 
    75     009A                     	;# 
    76     009A                     	;# 
    77     009B                     	;# 
    78     009C                     	;# 
    79     009D                     	;# 
    80     009E                     	;# 
    81     009F                     	;# 
    82     0000                     	;# 
    83     0001                     	;# 
    84     0002                     	;# 
    85     0003                     	;# 
    86     0004                     	;# 
    87     0005                     	;# 
    88     000A                     	;# 
    89     000B                     	;# 
    90     000C                     	;# 
    91     000E                     	;# 
    92     000E                     	;# 
    93     000F                     	;# 
    94     0010                     	;# 
    95     0019                     	;# 
    96     001E                     	;# 
    97     001F                     	;# 
    98     0081                     	;# 
    99     0085                     	;# 
   100     008C                     	;# 
   101     008E                     	;# 
   102     0090                     	;# 
   103     0095                     	;# 
   104     0096                     	;# 
   105     0096                     	;# 
   106     0099                     	;# 
   107     009A                     	;# 
   108     009A                     	;# 
   109     009B                     	;# 
   110     009C                     	;# 
   111     009D                     	;# 
   112     009E                     	;# 
   113     009F                     	;# 
   114                           
   115                           	psect	idataBANK0
   116     006C                     __pidataBANK0:
   117                           
   118                           ;initializer for _arraybits
   119     006C  3401               	retlw	1
   120     006D  3402               	retlw	2
   121     006E  3404               	retlw	4
   122     006F  3410               	retlw	16
   123                           
   124                           ;initializer for _m_counter
   125     0070  3401               	retlw	1
   126     000B                     _INTCON	set	11
   127     0019                     _CMCON	set	25
   128     001F                     _ADCON0	set	31
   129     0005                     _GPIO	set	5
   130     0005                     _GPIObits	set	5
   131     0058                     _GPIF	set	88
   132     0095                     _WPU	set	149
   133     0096                     _IOC	set	150
   134     0081                     _OPTION_REG	set	129
   135     0085                     _TRISIO	set	133
   136     0099                     _VRCON	set	153
   137     009F                     _ANSEL	set	159
   138                           
   139                           	psect	cinit
   140     000E                     start_initialization:	
   141                           ; #config settings
   142                           
   143     000E                     __initialization:
   144                           
   145                           ; Initialize objects allocated to BANK0
   146     000E  206C               	fcall	__pidataBANK0	;fetch initializer
   147     000F  00A0               	movwf	__pdataBANK0& (0+127)
   148     0010  206D               	fcall	__pidataBANK0+1	;fetch initializer
   149     0011  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   150     0012  206E               	fcall	__pidataBANK0+2	;fetch initializer
   151     0013  00A2               	movwf	(__pdataBANK0+2)& (0+127)
   152     0014  206F               	fcall	__pidataBANK0+3	;fetch initializer
   153     0015  00A3               	movwf	(__pdataBANK0+3)& (0+127)
   154     0016  2070               	fcall	__pidataBANK0+4	;fetch initializer
   155     0017  00A4               	movwf	(__pdataBANK0+4)& (0+127)
   156     0018                     end_of_initialization:	
   157                           ;End of C runtime variable initialization code
   158                           
   159     0018                     __end_of__initialization:
   160     0018  0183               	clrf	3
   161     0019  2866               	ljmp	_main	;jump to C main() function
   162                           
   163                           	psect	dataBANK0
   164     0020                     __pdataBANK0:
   165     0020                     _arraybits:
   166     0020                     	ds	4
   167     0024                     _m_counter:
   168     0024                     	ds	1
   169                           
   170                           	psect	cstackCOMMON
   171     0000                     __pcstackCOMMON:
   172     0000                     ??_InitCCT:
   173     0000                     ??_main:	
   174                           ; 1 bytes @ 0x0
   175                           
   176                           
   177                           	psect	cstackBANK0
   178     0025                     __pcstackBANK0:	
   179                           ; 1 bytes @ 0x0
   180                           
   181     0025                     ?_myISR:
   182     0025                     ??_myISR:	
   183                           ; 1 bytes @ 0x0
   184                           
   185     0025                     ?_InitCCT:	
   186                           ; 1 bytes @ 0x0
   187                           
   188     0025                     ?_main:	
   189                           ; 1 bytes @ 0x0
   190                           
   191                           
   192                           ; 1 bytes @ 0x0
   193     0025                     	ds	4
   194                           
   195                           	psect	maintext
   196     0066                     __pmaintext:	
   197 ;;
   198 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   199 ;;
   200 ;; *************** function _main *****************
   201 ;; Defined at:
   202 ;;		line 92 in file "main.c"
   203 ;; Parameters:    Size  Location     Type
   204 ;;		None
   205 ;; Auto vars:     Size  Location     Type
   206 ;;		None
   207 ;; Return value:  Size  Location     Type
   208 ;;                  1    wreg      void 
   209 ;; Registers used:
   210 ;;		wreg, status,2, status,0, pclath, cstack
   211 ;; Tracked objects:
   212 ;;		On entry : B00/0
   213 ;;		On exit  : 0/0
   214 ;;		Unchanged: 0/0
   215 ;; Data sizes:     COMMON   BANK0
   216 ;;      Params:         0       0
   217 ;;      Locals:         0       0
   218 ;;      Temps:          0       0
   219 ;;      Totals:         0       0
   220 ;;Total ram usage:        0 bytes
   221 ;; Hardware stack levels required when called: 2
   222 ;; This function calls:
   223 ;;		_InitCCT
   224 ;; This function is called by:
   225 ;;		Startup code after reset
   226 ;; This function uses a non-reentrant model
   227 ;;
   228                           
   229     0066                     _main:	
   230                           ;psect for function _main
   231                           
   232     0066                     l676:	
   233                           ;incstack = 0
   234                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   235                           
   236                           
   237                           ;main.c: 94:     InitCCT();
   238     0066  2053               	fcall	_InitCCT
   239     0067                     l678:
   240                           
   241                           ;main.c: 97:     INTCON = 0b10100000;
   242     0067  30A0               	movlw	160
   243     0068  008B               	movwf	11	;volatile
   244     0069                     l680:
   245                           
   246                           ;main.c: 98:     GPIF = 0;
   247     0069  100B               	bcf	11,0	;volatile
   248     006A                     l57:	
   249                           ;main.c: 100:     while (1)
   250                           
   251     006A                     l58:	
   252                           ;main.c: 101:     {;main.c: 103:     }
   253                           
   254     006A  286A               	goto	l57
   255     006B  280D               	ljmp	start
   256     006C                     __end_of_main:
   257                           
   258                           	psect	text1
   259     0053                     __ptext1:	
   260 ;; *************** function _InitCCT *****************
   261 ;; Defined at:
   262 ;;		line 78 in file "main.c"
   263 ;; Parameters:    Size  Location     Type
   264 ;;		None
   265 ;; Auto vars:     Size  Location     Type
   266 ;;		None
   267 ;; Return value:  Size  Location     Type
   268 ;;                  1    wreg      void 
   269 ;; Registers used:
   270 ;;		wreg, status,2
   271 ;; Tracked objects:
   272 ;;		On entry : 0/0
   273 ;;		On exit  : 0/0
   274 ;;		Unchanged: 0/0
   275 ;; Data sizes:     COMMON   BANK0
   276 ;;      Params:         0       0
   277 ;;      Locals:         0       0
   278 ;;      Temps:          0       0
   279 ;;      Totals:         0       0
   280 ;;Total ram usage:        0 bytes
   281 ;; Hardware stack levels used: 1
   282 ;; Hardware stack levels required when called: 1
   283 ;; This function calls:
   284 ;;		Nothing
   285 ;; This function is called by:
   286 ;;		_main
   287 ;; This function uses a non-reentrant model
   288 ;;
   289                           
   290     0053                     _InitCCT:	
   291                           ;psect for function _InitCCT
   292                           
   293     0053                     l644:	
   294                           ;incstack = 0
   295                           ; Regs used in _InitCCT: [wreg+status,2]
   296                           
   297                           
   298                           ;main.c: 80:     ANSEL = 0x00;
   299     0053  1683               	bsf	3,5	;RP0=1, select bank1
   300     0054  019F               	clrf	31	;volatile
   301                           
   302                           ;main.c: 81:     ADCON0 = 0x00;
   303     0055  1283               	bcf	3,5	;RP0=0, select bank0
   304     0056  019F               	clrf	31	;volatile
   305     0057                     l646:
   306                           
   307                           ;main.c: 82:     CMCON = 0x07;
   308     0057  3007               	movlw	7
   309     0058  0099               	movwf	25	;volatile
   310     0059                     l648:
   311                           
   312                           ;main.c: 83:     VRCON = 0x00;
   313     0059  1683               	bsf	3,5	;RP0=1, select bank1
   314     005A  0199               	clrf	25	;volatile
   315                           
   316                           ;main.c: 84:     TRISIO = 0b00100000;
   317     005B  3020               	movlw	32
   318     005C  0085               	movwf	5	;volatile
   319                           
   320                           ;main.c: 85:     OPTION_REG = 0b00001111;
   321     005D  300F               	movlw	15
   322     005E  0081               	movwf	1	;volatile
   323                           
   324                           ;main.c: 86:     IOC = 0b00100000;
   325     005F  3020               	movlw	32
   326     0060  0096               	movwf	22	;volatile
   327     0061                     l650:
   328                           
   329                           ;main.c: 87:     GPIO = 0x00;
   330     0061  1283               	bcf	3,5	;RP0=0, select bank0
   331     0062  0185               	clrf	5	;volatile
   332     0063                     l652:
   333                           
   334                           ;main.c: 88:     WPU |= (1 << 5);
   335     0063  1683               	bsf	3,5	;RP0=1, select bank1
   336     0064  1695               	bsf	21,5	;volatile
   337     0065                     l52:
   338     0065  0008               	return
   339     0066                     __end_of_InitCCT:
   340                           
   341                           	psect	text2
   342     001A                     __ptext2:	
   343 ;; *************** function _myISR *****************
   344 ;; Defined at:
   345 ;;		line 32 in file "main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;		None
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1    wreg      void 
   352 ;; Registers used:
   353 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   354 ;; Tracked objects:
   355 ;;		On entry : 0/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMMON   BANK0
   359 ;;      Params:         0       0
   360 ;;      Locals:         0       0
   361 ;;      Temps:          0       4
   362 ;;      Totals:         0       4
   363 ;;Total ram usage:        4 bytes
   364 ;; Hardware stack levels used: 1
   365 ;; This function calls:
   366 ;;		Nothing
   367 ;; This function is called by:
   368 ;;		Interrupt level 1
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372     001A                     _myISR:	
   373                           ;psect for function _myISR
   374                           
   375     001A                     i1l654:
   376                           
   377                           ;main.c: 36:     if (m_counter == 5){
   378     001A  3005               	movlw	5
   379     001B  0624               	xorwf	_m_counter,w
   380     001C  1D03               	btfss	3,2
   381     001D  281F               	goto	u5_21
   382     001E  2820               	goto	u5_20
   383     001F                     u5_21:
   384     001F  2822               	goto	i1l35
   385     0020                     u5_20:
   386     0020                     i1l656:
   387                           
   388                           ;main.c: 37:         m_counter = 1 ;
   389     0020  01A4               	clrf	_m_counter
   390     0021  0AA4               	incf	_m_counter,f
   391     0022                     i1l35:	
   392                           ;main.c: 38:     }
   393                           
   394                           
   395                           ;main.c: 40:     if (GPIF && (GPIObits.GP5 == 0))
   396     0022  1C0B               	btfss	11,0	;volatile
   397     0023  2825               	goto	u6_21
   398     0024  2826               	goto	u6_20
   399     0025                     u6_21:
   400     0025  2849               	goto	i1l674
   401     0026                     u6_20:
   402     0026                     i1l658:
   403     0026  1A85               	btfsc	5,5	;volatile
   404     0027  2829               	goto	u7_21
   405     0028  282A               	goto	u7_20
   406     0029                     u7_21:
   407     0029  2849               	goto	i1l674
   408     002A                     u7_20:
   409     002A  2837               	goto	i1l670
   410     002B                     i1l662:
   411                           
   412                           ;main.c: 47:                 GPIO= arraybits[0] ;
   413     002B  0820               	movf	_arraybits,w
   414     002C  0085               	movwf	5	;volatile
   415                           
   416                           ;main.c: 48:                 break ;
   417     002D  2845               	goto	i1l672
   418     002E                     i1l664:
   419                           
   420                           ;main.c: 51:                 GPIO = arraybits[1];
   421     002E  0821               	movf	_arraybits+1,w
   422     002F  0085               	movwf	5	;volatile
   423                           
   424                           ;main.c: 52:                 break ;
   425     0030  2845               	goto	i1l672
   426     0031                     i1l666:
   427                           
   428                           ;main.c: 54:                  GPIO = arraybits[2];;
   429     0031  0822               	movf	_arraybits+2,w
   430     0032  0085               	movwf	5	;volatile
   431                           
   432                           ;main.c: 55:                 break ;
   433     0033  2845               	goto	i1l672
   434     0034                     i1l668:
   435                           
   436                           ;main.c: 57:                 GPIO= arraybits[3] ;
   437     0034  0823               	movf	_arraybits+3,w
   438     0035  0085               	movwf	5	;volatile
   439                           
   440                           ;main.c: 62:         }
   441     0036  2845               	goto	i1l672
   442     0037                     i1l670:
   443     0037  0824               	movf	_m_counter,w
   444                           
   445                           ; Switch size 1, requested type "simple"
   446                           ; Number of cases is 4, Range of values is 1 to 4
   447                           ; switch strategies available:
   448                           ; Name         Instructions Cycles
   449                           ; simple_byte           13     7 (average)
   450                           ; direct_byte           13     9 (fixed)
   451                           ; jumptable            263     9 (fixed)
   452                           ;	Chosen strategy is simple_byte
   453     0038  3A01               	xorlw	1	; case 1
   454     0039  1903               	skipnz
   455     003A  282B               	goto	i1l662
   456     003B  3A03               	xorlw	3	; case 2
   457     003C  1903               	skipnz
   458     003D  282E               	goto	i1l664
   459     003E  3A01               	xorlw	1	; case 3
   460     003F  1903               	skipnz
   461     0040  2831               	goto	i1l666
   462     0041  3A07               	xorlw	7	; case 4
   463     0042  1903               	skipnz
   464     0043  2834               	goto	i1l668
   465     0044  2845               	goto	i1l672
   466     0045                     i1l672:
   467                           
   468                           ;main.c: 64:         m_counter +=1 ;
   469     0045  3001               	movlw	1
   470     0046  00A5               	movwf	??_myISR
   471     0047  0825               	movf	??_myISR,w
   472     0048  07A4               	addwf	_m_counter,f
   473     0049                     i1l674:
   474                           
   475                           ;main.c: 66:     GPIF = 0;
   476     0049  100B               	bcf	11,0	;volatile
   477     004A                     i1l43:
   478     004A  0828               	movf	??_myISR+3,w
   479     004B  008A               	movwf	10
   480     004C  0827               	movf	??_myISR+2,w
   481     004D  0084               	movwf	4
   482     004E  0E26               	swapf	??_myISR+1,w
   483     004F  0083               	movwf	3
   484     0050  0EDE               	swapf	btemp,f
   485     0051  0E5E               	swapf	btemp,w
   486     0052  0009               	retfie
   487     0053                     __end_of_myISR:
   488     005E                     btemp	set	94	;btemp
   489     005E                     wtemp0	set	94
   490                           
   491                           	psect	intentry
   492     0004                     __pintentry:	
   493                           ;incstack = 0
   494                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0]
   495                           
   496     0004                     interrupt_function:
   497     005E                     saved_w	set	btemp
   498     0004  00DE               	movwf	btemp
   499     0005  0E03               	swapf	3,w
   500     0006  1283               	bcf	3,5	;RP0=0, select bank0
   501     0007  00A6               	movwf	??_myISR+1
   502     0008  0804               	movf	4,w
   503     0009  00A7               	movwf	??_myISR+2
   504     000A  080A               	movf	10,w
   505     000B  00A8               	movwf	??_myISR+3
   506     000C  281A               	ljmp	_myISR
   507                           
   508                           	psect	config
   509                           
   510                           ;Config register CONFIG @ 0x2007
   511                           ;	Oscillator Selection bits
   512                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
   513                           ;	Watchdog Timer Enable bit
   514                           ;	WDTE = OFF, WDT disabled
   515                           ;	Power-Up Timer Enable bit
   516                           ;	PWRTE = OFF, PWRT disabled
   517                           ;	GP3/MCLR pin function select
   518                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   519                           ;	Brown-out Detect Enable bit
   520                           ;	BOREN = OFF, BOD disabled
   521                           ;	Code Protection bit
   522                           ;	CP = OFF, Program Memory code protection is disabled
   523                           ;	Data Code Protection bit
   524                           ;	CPD = OFF, Data memory code protection is disabled
   525     2007                     	org	8199
   526     2007  3194               	dw	12692

Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      4       9

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                            _InitCCT
 ---------------------------------------------------------------------------------
 (1) _InitCCT                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _myISR                                                4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitCCT

 _myISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E      4       9       4       14.5%
BITBANK0            3E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       9       6        0.0%
ABS                  0      0       9       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Sep 26 22:17:07 2024

                     l52 0065                       l57 006A                       l58 006A  
                    l650 0061                      l652 0063                      l644 0053  
                    l646 0057                      l648 0059                      l680 0069  
                    l676 0066                      l678 0067                      _IOC 0096  
                    _WPU 0095                      fsr0 0004                     _GPIF 0058  
                   _GPIO 0005                     i1l43 004A                     i1l35 0022  
                   u5_20 0020                     u5_21 001F                     u6_20 0026  
                   u6_21 0025                     u7_20 002A                     u7_21 0029  
                   _main 0066                     btemp 005E                     start 000D  
        __end_of_InitCCT 0066                    ?_main 0025                    _CMCON 0019  
                  _ANSEL 009F                    i1l662 002B                    i1l670 0037  
                  i1l654 001A                    i1l664 002E                    i1l672 0045  
                  i1l656 0020                    i1l666 0031                    i1l658 0026  
                  i1l674 0049                    i1l668 0034                    _VRCON 0099  
                  _myISR 001A                    pclath 000A                    status 0003  
                  wtemp0 005E          __initialization 000E             __end_of_main 006C  
                 ??_main 0000                   _ADCON0 001F                   ?_myISR 0025  
                 _INTCON 000B                   _TRISIO 0085                ??_InitCCT 0000  
                 saved_w 005E  __end_of__initialization 0018           __pcstackCOMMON 0000  
           __pidataBANK0 006C            __end_of_myISR 0053                  ??_myISR 0025  
             __pmaintext 0066               __pintentry 0004                  _InitCCT 0053  
                __ptext1 0053                  __ptext2 001A     end_of_initialization 0018  
    start_initialization 000E              __pdataBANK0 0020                ___latbits 0000  
          __pcstackBANK0 0025                 ?_InitCCT 0025                _arraybits 0020  
              _m_counter 0024        interrupt_function 0004                 _GPIObits 0005  
               intlevel1 0000               _OPTION_REG 0081  
